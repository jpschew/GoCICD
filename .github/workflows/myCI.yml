# name for the workflow
# need space for key value pair
name: CI for Go code
# on is for event triggering like push, commit etc
on:
  push:
  # which branch to monitor, can add more than one branch to monitor by using comma within []
    branches: [main]
  pull_request:
    branches: [main]

# jobs to execute
jobs:
  # build is name of the job if -name is not specified
  build:
    # name for printing
    name: Load OS
    # runs-on to specify OS in virtual machine
    runs-on: ubuntu-latest
    # steps to run after OS is set up on VM
    steps:
    - name: Print hello
      # run is to run command prompt/ terminal, | used for multiple lines
      run: |
        ls
        echo Hello!!
        
    # set up Go    
    - name: Setup Go
      # uses install the software you want from actions/ repo
      uses: actions/setup-go@v3.2.0
      # with is like a customisation command
      with:
        go-version: 1.18
        
    # check Go version
    - name: Check Go version
      run: go version
      
    # clone repo to root of VM
    - name: Checkout Repo
      uses: actions/checkout@v2.4.2
    
    # clone remote private repo to root of VM
    - name: Checkout Remote Private Repo
      uses: actions/checkout@v2.4.2
      with:
        repository: lowkh2/GoSchoolRemoteExample
        token: ${{ secrets.GOSECRET }}  
        path: remote
      
    # check if files are corrected cloned in remote folder
    # cat is to print out the content of myText.txt
    - name: Check remote files
      run: |
        cd remote
        ls
        cat myText.txt
        cd ..
      
    # check if files are corrected cloned
    - name: Check File System
      run: ls
      
    # install go dependencies and run test
    # go mod init calc
    # go get github.com/franela/goblin
    # go mod tidy
    # can be replaced by 
    # go build with go mod and go sum in the vm
    # install tebeka to convert test results to xml format
    - name: Install Go Dependencies and Run Test
      run: |
        go build
        go install github.com/tebeka/go2xunit@latest 
        go mod tidy
        go test -v
        go test -v | go2xunit -output tests.xml 
        
    # read xml and publish results
    # The if: always() clause guarantees that this action always runs,
    # even if earlier steps (e.g., the test step) in your workflow fail
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always() # can be with or without S{{}} 
      with:
        files: tests.xml
        
    # - specify another block
    # for if condition need specify another block
    - if: ${{ failure() }}
      name: Create Issue Action
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Build Failed
        token: ${{secrets.GITHUB_TOKEN}} # after creating the repo, will have a token created
        assignees: ${{github.actor}} # actor is whoever trigger this yaml file
        labels: workflow-failed
        body: Workflow failed for commit ${{github.sha}} # sha is hashcode for commit
